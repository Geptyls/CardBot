import os
import sqlite3
import threading
import queue
import time
import asyncio
import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = 8304828272:AAER7l8wyoZA-8jlhaYfyxteId5Kt2lGa-A  # ‚Üê –∏–∑ @BotFather
GEMINI_API_KEY = AIzaSyBxYoaTIukZqxAMZaTISJKjoPRpdzW9e4U  # ‚Üê –∏–∑ Google AI Studio
YOUR_TELEGRAM_ID = 647688105  # ‚Üê —Ç–≤–æ–π ID (—É–∑–Ω–∞–π —É @userinfobot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# === –ë–ê–ó–ê ===
def init_db():
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            free_analyses INTEGER DEFAULT 3,
            is_premium BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    return conn

db = init_db()

def get_user(user_id):
    cur = db.cursor()
    cur.execute("SELECT free_analyses, is_premium FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    return {"free": row[0], "premium": bool(row[1])} if row else {"free": 3, "premium": False}

def use_free_analysis(user_id):
    cur = db.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id, free_analyses) VALUES (?, 3)", (user_id,))
    cur.execute("UPDATE users SET free_analyses = free_analyses - 1 WHERE user_id = ?", (user_id,))
    db.commit()

def grant_premium(user_id):
    cur = db.cursor()
    cur.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    cur.execute("UPDATE users SET is_premium = 1 WHERE user_id = ?", (user_id,))
    db.commit()

# === –ò–ò + –û–ß–ï–†–ï–î–¨ ===
task_queue = queue.Queue()
last_call = 0

def ai_worker():
    global last_call
    while True:
        task = task_queue.get()
        if task is None:
            break
        user_id, full_prompt, callback = task
        
        now = time.time()
        if now - last_call < 1:
            time.sleep(1 - (now - last_call))
        last_call = time.time()
        
        try:
            response = model.generate_content(
                full_prompt,
                safety_settings=[
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                ]
            )
            result = response.text.strip()
        except Exception as e:
            result = "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ! (–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        
        callback(user_id, result)
        task_queue.task_done()

threading.Thread(target=ai_worker, daemon=True).start()

# === –ü–ê–†–°–ï–† WB ===
def parse_wb_card(url):
    headers = {"User-Agent": "Mozilla/5.0"}
    resp = requests.get(url, headers=headers, timeout=10)
    soup = BeautifulSoup(resp.text, 'html.parser')
    title = soup.find('h1').get_text(strip=True) if soup.find('h1') else "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"
    price_meta = soup.find('meta', {'itemprop': 'price'})
    price = float(price_meta['content']) if price_meta else 0
    images = len([img for img in soup.find_all('img', {'src': True}) if 'wbstatic' in img['src']])
    return {"title": title, "price": price, "images_count": images}

# === –£–ú–ù–´–ô –ü–†–û–ú–¢ –î–õ–Ø –ò–ò ===
def build_smart_prompt(title, images_count, price):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    category = "–û–±—â–µ–µ"
    title_lower = title.lower()
    if any(kw in title_lower for kw in ["—Ñ—É—Ç–±–æ–ª–∫", "–∫–æ—Ñ—Ç–∞", "–ø–ª–∞—Ç—å–µ", "–¥–∂–∏–Ω—Å—ã", "–æ–±—É–≤—å", "–∫—Ä–æ—Å—Å–æ–≤–∫–∏"]):
        category = "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å"
    elif any(kw in title_lower for kw in ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–∞—É—à–Ω–∏–∫–∏", "–ø–ª–∞–Ω—à–µ—Ç", "—á–µ—Ö–æ–ª"]):
        category = "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"
    elif any(kw in title_lower for kw in ["–∫—Ä–µ–º", "–º–∞—Å–∫–∞", "—à–∞–º–ø—É–Ω—å", "–∫–æ—Å–º–µ—Ç–∏–∫–∞"]):
        category = "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ"

    # –°—Ç—Ä–æ–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º—Ç
    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Wildberries —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. **SEO-–Ω–∞–∑–≤–∞–Ω–∏–µ**: 
   - –î–ª–∏–Ω–∞: {len(title)} —Å–∏–º–≤–æ–ª–æ–≤ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 60‚Äì80)
   - –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: —Å–µ–∑–æ–Ω (2024/–ª–µ—Ç–æ/–∑–∏–º–∞), –º–∞—Ç–µ—Ä–∏–∞–ª, —Ä–∞–∑–º–µ—Ä, —Ü–≤–µ—Ç, –±—Ä–µ–Ω–¥?
2. **–§–æ—Ç–æ**: {images_count} —à—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5‚Äì8, –≤–∫–ª—é—á–∞—è 360¬∞ –∏ –≤–∏–¥–µ–æ)
3. **–¶–µ–Ω–∞**: {price} ‚ÇΩ ‚Äî –∞–¥–µ–∫–≤–∞—Ç–Ω–∞ –ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª?

–î–∞–π **–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç** –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
- –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏?
- –°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?
- –ù—É–∂–Ω–æ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É?

–û—Ç–≤–µ—Ç –¥–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –≤ 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –±–µ–∑ –≤–æ–¥—ã –∏ –æ–±—â–∏—Ö —Ñ—Ä–∞–∑. –ù–µ –ø–∏—à–∏ ¬´–≤–æ–∑–º–æ–∂–Ω–æ¬ª, ¬´—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è¬ª ‚Äî –ø–∏—à–∏ —á—ë—Ç–∫–æ: ¬´–î–æ–±–∞–≤—å—Ç–µ¬ª, ¬´–£–±–µ—Ä–∏—Ç–µ¬ª, ¬´–ò–∑–º–µ–Ω–∏—Ç–µ¬ª.

–ö–∞—Ä—Ç–æ—á–∫–∞:
–ù–∞–∑–≤–∞–Ω–∏–µ: "{title}"
–§–æ—Ç–æ: {images_count} —à—Ç
–¶–µ–Ω–∞: {price} ‚ÇΩ
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}
"""
    return prompt

# === –ö–õ–ê–í–ò–ê–¢–£–†–ê ===
def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"))
    kb.add(KeyboardButton("‚ú® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É"))
    kb.add(KeyboardButton("‚ÑπÔ∏è FAQ"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return kb

# === –ë–û–¢ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CardDoctor!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —É–ª—É—á—à–∏—Ç—å –≤–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ Wildberries:\n"
        "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —á—É–∂—É—é –∫–∞—Ä—Ç–æ—á–∫—É\n"
        "‚Ä¢ –°–æ–∑–¥–∞–º –∏–¥–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –î–∞–º —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò-—ç–∫—Å–ø–µ—Ä—Ç–∞",
        reply_markup=main_keyboard()
    )

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è FAQ")
async def faq(message: types.Message):
    await message.answer(
        "üìò <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        "1Ô∏è‚É£ <b>–ö–∞–∫ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É?</b>\n"
        "   ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏¬ª ‚Üí –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Wildberries.\n\n"
        "2Ô∏è‚É£ <b>–°–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤?</b>\n"
        "   ‚Üí 3 —à—Ç—É–∫–∏. –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º.\n\n"
        "3Ô∏è‚É£ <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º?</b>\n"
        "   ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª ‚Üí –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°.\n\n"
        "4Ô∏è‚É£ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ Ozon?</b>\n"
        "   ‚Üí –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ Wildberries. Ozon ‚Äî –≤ –ø–ª–∞–Ω–∞—Ö.",
        parse_mode="HTML"
    )

@dp.message_handler(lambda msg: msg.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer(
        "üõ†Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é ‚Äî —è –æ—Ç–≤–µ—á—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤:\n",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –õ–°", url=f"tg://user?id={YOUR_TELEGRAM_ID}")
        )
    )

@dp.message_handler(lambda msg: msg.text == "üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏")
async def ask_for_link(message: types.Message):
    user = get_user(message.from_user.id)
    if not user["premium"] and user["free"] <= 0:
        await message.answer(
            "‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º", url=f"tg://user?id={YOUR_TELEGRAM_ID}")
            )
        )
        return
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É Wildberries:")

@dp.message_handler(lambda msg: "wildberries.ru" in msg.text)
async def handle_analysis(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    
    if not user["premium"] and user["free"] <= 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø.")
        return

    try:
        data = parse_wb_card(message.text)
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É... (1‚Äì2 –º–∏–Ω—É—Ç—ã)")

        # === –°–û–ó–î–ê–ù–ò–ï –£–ú–ù–û–ì–û –ü–†–û–ú–¢–ê ===
        smart_prompt = build_smart_prompt(
            data['title'],
            data['images_count'],
            data['price']
        )

        def ai_callback(uid, result):
            asyncio.run_coroutine_threadsafe(
                send_result(uid, result, user["premium"]),
                asyncio.get_event_loop()
            )

        async def send_result(uid, result, is_premium):
            if not is_premium:
                use_free_analysis(uid)
                new_free = get_user(uid)["free"]
                footer = f"\n\n‚ÑπÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {new_free}" if new_free > 0 else "\n\nüí° –•–æ—Ç–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            else:
                footer = ""
            await bot.send_message(uid, f"üß† <b>–ò–ò-–∞–Ω–∞–ª–∏–∑:</b>\n{result}{footer}", parse_mode="HTML")

        task_queue.put((user_id, smart_prompt, ai_callback))

    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞.")

@dp.message_handler(lambda msg: msg.text == "‚ú® –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É")
async def create_card_intro(message: types.Message):
    user = get_user(message.from_user.id)
    if not user["premium"]:
        await message.answer(
            "‚ú® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–æ–º.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º", url=f"tg://user?id={YOUR_TELEGRAM_ID}")
            )
        )
        return
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –¢–∏–ø —Ç–æ–≤–∞—Ä–∞, –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –¶–µ–Ω–∞\n\n–ü—Ä–∏–º–µ—Ä:\n–û–¥–µ–∂–¥–∞, –ú—É–∂—Å–∫–∏–µ —Ñ—É—Ç–±–æ–ª–∫–∏, 100% —Ö–ª–æ–ø–æ–∫ oversize, 1200")

@dp.message_handler(commands=['premium'])
async def give_premium(message: types.Message):
    if message.from_user.id == YOUR_TELEGRAM_ID:
        try:
            target_id = int(message.get_args())
            grant_premium(target_id)
            await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω {target_id}")
        except:
            await message.answer("UsageId: /premium USER_ID")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)