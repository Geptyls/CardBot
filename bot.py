# bot.py
import os
import requests
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from bs4 import BeautifulSoup

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")


# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—ÅGPT
# -----------------------------
def analyze_with_yandex(text):
    url = "https://llm.api.cloud.yandex.net/llm/v1/completions"
    headers = {
        "Authorization": f"Bearer {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "yandex/gpt-pro",
        "folderId": FOLDER_ID,
        "input": [
            {"role": "user", "content": f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ Wildberries –∏ –¥–∞–π –æ—Ü–µ–Ω–∫—É:\n{text}"}
        ],
        "maxOutputTokens": 400,
        "temperature": 0.5
    }
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=60)
        response.raise_for_status()
        data = response.json()
        return data["output"][0]["content"][0]["text"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ Yandex API: {e}"


# -----------------------------
# –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ WB
# -----------------------------
def parse_wb_card(url):
    try:
        r = requests.get(url, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")
        title = soup.find("h1")
        description = soup.find("div", {"class": "about__text"})
        title_text = title.text.strip() if title else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        desc_text = description.text.strip() if description else "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        return f"{title_text}\n{desc_text}\n–°—Å—ã–ª–∫–∞: {url}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}"


# -----------------------------
# –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
# -----------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ Wildberries, –∏ —è –¥–∞–º –∞–Ω–∞–ª–∏–∑.")


async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if "wildberries.ru" not in url:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries üîó")
        return

    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É...")

    parsed = parse_wb_card(url)
    result = analyze_with_yandex(parsed)

    await update.message.reply_text(f"üìä –ê–Ω–∞–ª–∏–∑:\n{result}")


# -----------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -----------------------------
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
