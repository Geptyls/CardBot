import os
import sqlite3
import time
import threading
import queue
import google.generativeai as genai
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === –ù–ê–°–¢–†–û–ô–ö–ò ‚Äî –ó–ê–ú–ï–ù–ò –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø ===
BOT_TOKEN = "8304828272:AAER7l8wyoZA-8jlhaYfyxteId5Kt2lGa-A"  # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ö–ê–í–´–ß–ö–ê–•!
GEMINI_API_KEY = "AIzaSyBxYoaTIukZqxAMZaTISJKjoPRpdzW9e4U"    # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –í –ö–ê–í–´–ß–ö–ê–•!
YOUR_TELEGRAM_ID = 647688105  # ‚Üê –¢–í–û–ô ID –ë–ï–ó –ö–ê–í–´–ß–ï–ö! (—É–∑–Ω–∞–π —É @userinfobot)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def get_db_connection():
    conn = sqlite3.connect('bot.db', check_same_thread=False)
    conn.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            free_analyses INTEGER DEFAULT 3,
            is_premium BOOLEAN DEFAULT 0
        )
    ''')
    conn.commit()
    return conn

# === –û–ß–ï–†–ï–î–¨ –î–õ–Ø –ò–ò ===
task_queue = queue.Queue()

def ai_worker():
    while True:
        task = task_queue.get()
        if task is None:
            break
        user_id, prompt, send_func = task
        try:
            response = model.generate_content(
                f"–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Wildberries. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç–æ—á–∫—É –∏ –¥–∞–π –ü–†–ê–ö–¢–ò–ß–ù–´–ô —Å–æ–≤–µ—Ç —Å–µ–ª–ª–µ—Ä—É.\n\n{prompt}\n\n–û—Ç–≤–µ—Ç –¥–∞–π –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ë–µ–∑ –≤–æ–¥—ã. –ù–∞ —Ä—É—Å—Å–∫–æ–º.",
                safety_settings=[
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_NONE"},
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_NONE"},
                ]
            )
            result = response.text.strip()
        except:
            result = "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –≤ —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–µ! (–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
        send_func(user_id, result)
        task_queue.task_done()

threading.Thread(target=ai_worker, daemon=True).start()

# === –ü–ê–†–°–ï–† WB ===
def parse_wb_card(url):
    headers = {"User-Agent": "Mozilla/5.0"}
    resp = requests.get(url, headers=headers, timeout=10)
    soup = BeautifulSoup(resp.text, 'html.parser')
    title = soup.find('h1').get_text(strip=True) if soup.find('h1') else "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"
    price_meta = soup.find('meta', {'itemprop': 'price'})
    price = float(price_meta['content']) if price_meta else 0
    images = len([img for img in soup.find_all('img', {'src': True}) if 'wbstatic' in img['src']])
    return {"title": title, "price": price, "images_count": images}

# === –ë–û–¢ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏"))
    kb.add(KeyboardButton("‚ÑπÔ∏è FAQ"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    return kb

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî CardDoctor.\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É Wildberries ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å –ø–æ–º–æ—â—å—é –ò–ò.",
        reply_markup=main_keyboard()
    )

@dp.message_handler(lambda msg: msg.text == "‚ÑπÔ∏è FAQ")
async def faq(message: types.Message):
    await message.answer(
        "üìò <b>FAQ:</b>\n\n"
        "1. <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?</b>\n   ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏¬ª ‚Üí –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Wildberries.\n\n"
        "2. <b>–°–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?</b>\n   ‚Üí 3 –∞–Ω–∞–ª–∏–∑–∞. –ü–æ—Ç–æ–º ‚Äî –ø—Ä–µ–º–∏—É–º.\n\n"
        "3. <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–º–∏—É–º?</b>\n   ‚Üí –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª ‚Üí –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°.",
        parse_mode="HTML"
    )

@dp.message_handler(lambda msg: msg.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer(
        "üì© –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞–ø—Ä—è–º—É—é:",
        reply_markup=types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –õ–°", url=f"tg://user?id={YOUR_TELEGRAM_ID}")
        )
    )

@dp.message_handler(lambda msg: msg.text == "üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏")
async def ask_link(message: types.Message):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT free_analyses, is_premium FROM users WHERE user_id = ?", (message.from_user.id,))
    row = cur.fetchone()
    free = row[0] if row else 3
    is_premium = row[1] if row else False

    if not is_premium and free <= 0:
        await message.answer(
            "‚ùå –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã.",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üíé –ü–æ–ª—É—á–∏—Ç—å –ü—Ä–µ–º–∏—É–º", url=f"tg://user?id={YOUR_TELEGRAM_ID}")
            )
        )
        return
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É Wildberries:")

@dp.message_handler(lambda msg: "wildberries.ru" in msg.text)
async def handle_analysis(message: types.Message):
    user_id = message.from_user.id
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT free_analyses, is_premium FROM users WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    free = row[0] if row else 3
    is_premium = row[1] if row else False

    if not is_premium and free <= 0:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø.")
        return

    try:
        data = parse_wb_card(message.text)
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... (1‚Äì2 –º–∏–Ω—É—Ç—ã)")

        prompt = (
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –û–¥–µ–∂–¥–∞\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: \"{data['title']}\"\n"
            f"–§–æ—Ç–æ: {data['images_count']} —à—Ç\n"
            f"–¶–µ–Ω–∞: {data['price']} ‚ÇΩ"
        )

        async def send_result(uid, result):
            if not is_premium:
                cur.execute("INSERT OR IGNORE INTO users (user_id, free_analyses) VALUES (?, 3)", (uid,))
                cur.execute("UPDATE users SET free_analyses = free_analyses - 1 WHERE user_id = ?", (uid,))
                conn.commit()
                cur.execute("SELECT free_analyses FROM users WHERE user_id = ?", (uid,))
                new_free = cur.fetchone()[0]
                footer = f"\n\n‚ÑπÔ∏è –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {new_free}" if new_free > 0 else "\n\nüí° –•–æ—Ç–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            else:
                footer = ""
            await bot.send_message(uid, f"üß† <b>–ò–ò-–∞–Ω–∞–ª–∏–∑:</b>\n{result}{footer}", parse_mode="HTML")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        def send_sync(uid, result):
            dp.loop.create_task(send_result(uid, result))
        task_queue.put((user_id, prompt, send_sync))

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–±–µ)
@dp.message_handler(commands=['premium'])
async def give_premium(message: types.Message):
    if message.from_user.id == YOUR_TELEGRAM_ID:
        try:
            target_id = int(message.get_args())
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (target_id,))
            cur.execute("UPDATE users SET is_premium = 1 WHERE user_id = ?", (target_id,))
            conn.commit()
            await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –≤—ã–¥–∞–Ω {target_id}")
        except:
            await message.answer("UsageId: /premium USER_ID")

if __name__ == '__main__':
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
