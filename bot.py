import os
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ======== –ù–ê–°–¢–†–û–ô–ö–ò ========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
HF_TOKEN = os.getenv("HF_TOKEN")

# –ú–æ–¥–µ–ª—å –Ω–∞ Hugging Face (—Ä—É—Å—Å–∫—É—é –∏–ª–∏ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—É—é –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)
MODEL_URL = "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill"
HEADERS = {"Authorization": f"Bearer {HF_TOKEN}"}

# ======== –ü–ê–†–°–ò–ù–ì –ö–ê–†–¢–û–ß–ö–ò –¢–û–í–ê–†–ê ========
def parse_wb_card(url):
    try:
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
        soup = BeautifulSoup(response.text, "html.parser")

        title = soup.find("h1")
        title = title.text.strip() if title else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

        desc = soup.find("p", {"class": "product-description__text"})
        desc = desc.text.strip() if desc else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        rating = soup.find("span", {"class": "product-review__rating"})
        rating = rating.text.strip() if rating else "–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω"

        return f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n–†–µ–π—Ç–∏–Ω–≥: {rating}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}"

# ======== –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó –ò–ò ========
def analyze_text(text):
    prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ Wildberries –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:\n{text}\n\n–î–∞–π –æ—Ü–µ–Ω–∫—É (0-10) –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—Ä—Ç–æ—á–∫–∏."

    payload = {"inputs": prompt, "parameters": {"max_new_tokens": 250}}
    response = requests.post(MODEL_URL, headers=HEADERS, json=payload)

    if response.status_code == 200:
        data = response.json()
        if isinstance(data, list) and len(data) > 0 and "generated_text" in data[0]:
            return data[0]["generated_text"]
        else:
            return str(data)
    else:
        return f"–û—à–∏–±–∫–∞ Hugging Face API: {response.status_code}, {response.text}"

# ======== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries, –∏ —è –≤—ã–¥–∞–º –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")

async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    if "wildberries.ru" not in url:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries üîó")
        return

    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É, –ø–æ–¥–æ–∂–¥–∏ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥...")

    parsed = parse_wb_card(url)
    result = analyze_text(parsed)

    await update.message.reply_text(f"üìä –ê–Ω–∞–ª–∏–∑:\n{result}")

# ======== –ó–ê–ü–£–°–ö ========
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


